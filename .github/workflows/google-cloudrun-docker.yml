# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Cloud Build (cloudbuild.googleapis.com)
#    - Cloud Run (run.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Cloud Run Source Developer (roles/run.sourceDeveloper)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources.
#
# 3. Change the values in the "env" block to match your values.

name: "Daily Data Update and Deploy to Cloud Run from Source"

on:
  schedule:
    - cron: "0 12 * * 0" # 2 AM UTC daily
  workflow_dispatch:

env:
  PROJECT_ID: "${{ secrets.PROJECT_ID }}" # Fixed: should reference PROJECT_ID secret
  REGION: "${{ secrets.REGION }}" # Fixed: should reference REGION secret
  SERVICE: "iam-roles-permissions" # TODO: update to your service name
  AR_REPOSITIRY: "github-ci-registry"

jobs:
  deploy:
    runs-on: "ubuntu-latest"

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332" # actions/checkout@v4

      - name: "Setup Bun"
        uses: "oven-sh/setup-bun@v1"

      - name: "Install dependencies"
        run: "bun install"

      - id: "sdk-auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@f112390a2df9932162083945e46d439060d66ec2" # google-github-actions/auth@v2
        with:
          workload_identity_provider: "${{ secrets.WIF_PROVIDER }}" # TODO: replace with your workload identity provider
          service_account: "${{ secrets.WIF_SERVICE_ACCOUNT }}"

      - name: "Run generate script get latest IAM roles"
        run: "bun run generate.ts"

      - id: "docker-auth"
        name: "Docker Auth"
        uses: "docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567" # docker/login-action@v3
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.auth_token }}"
          registry: "${{ env.REGION }}-docker.pkg.dev"

      - id: "docker-build"
        name: "Build and Push Container"
        run: |-
          DOCKER_TAG="$${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPOSITIRY }}/${{ env.SERVICE }}:${{ github.sha }}"
          docker build --tag "${DOCKER_TAG}" --cache-from "$${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPOSITIRY }}/${{ env.SERVICE }}:latest" . 
          docker push "${DOCKER_TAG}"

      - id: "deploy"
        name: "Deploy to Cloud Run"
        uses: "google-github-actions/deploy-cloudrun@33553064113a37d688aa6937bacbdc481580be17" # google-github-actions/deploy-cloudrun@v2
        with:
          service: "${{ env.SERVICE }}"
          region: "${{ env.REGION }}"
          image: "$${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPOSITIRY }}/${{ env.SERVICE }}:${{ github.sha }}"
          env_vars: |
            SITE_URL=${{ secrets.SITE_URL }}

      - id: "output"
        name: "Show output"
        run: |-
          echo ${{ steps.deploy.outputs.url }}
